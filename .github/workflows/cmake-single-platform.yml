# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platformew34uyerhjrpo45ihrprgn45rtcvo[j'r:FUp
ik:DD[r
tl'fkc

[rkfdF}Ikp'rmltdfp]i
k;'f]-[
;r,md[ockbid][o
l'gkdfc]-vikr
e;dLFFo
'lkerdjf[o
l'e<RDFCo=df[ipkjo[k';cIERPJDfpi]o
gke;r'D_IRKPDJ"G}{
DFK"_O{E
GKrpid]foj
[kerjdf9c-[pkrt;'mn[0uip]k
e'kddj0u=[oji-o[k;rt'ljCI
}kp[j
fu0=ip]rketJ
CV{u0fogme
trdiv-[c]kp[fi]rkm0igpej[rdf]o[lrkdfitor]kpf[jip]krtdfi-o[]kprtjGJORI{
Gdfip{RJDF}IPRJDF}RIPJDF){IEGJOrphdfu[oerjdpf
u0ipkfjc//
;'er
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

